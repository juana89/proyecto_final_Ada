# -*- coding: utf-8 -*-
"""cuenta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kV5_prDfQ9yZOLZkPH0UrSAEz2cQe-Yw
"""

#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author: <Juana Regert>

"""

 Creacion de clase Cuenta Comun  y  Cuenta Joven con sus respectivos metodos 
cuenta.py
clase  Movimiento

"""

import datetime
from datetime import date
class Cuenta():#Defino un contructor para Cuenta
  def __init__(self, monto_inicio=0, numero_de_cuenta=0):
    self.cantidad = monto_inicio
    self.numero_de_cuenta = numero_de_cuenta
    self.movimiento = []
    self.activa = True
  
  def crear_movimiento(self, descripcion, monto):
    movimiento = Movimiento_Cuenta(descripcion,monto)
    self.movimiento.append(movimiento)

  def aplicar_gastos(self, monto):#Metodo para extraccion dinero
     if monto < 0:
         print("El monto no puede ser negativo")
     elif monto > self.cantidad:
         print("saldo insuficiente")
     else:
      self.cantidad = self.cantidad - monto
      self.crear_movimiento("Aplicando un gasto",monto)

  def aplicar_deposito(self, monto):#Metodo dce agragado de dinero
    if monto < 0:
         print("El monto no puede ser negativo")
    self.cantidad = self.cantidad + monto
    self.crear_movimiento("Aplicando deposito",monto)

  def aplicar_transferencia(self, monto):#transerir necesito otra cuenta?
    if monto < 0:
         print("El monto no puede ser negativo")
    elif monto > self.cantidad:
         print("saldo insuficiente")
    self.cantidad = self.cantida  - monto
    self.crear_movimineto("aplicando transferencia",monto)
    
  def desactivar(self,monto):
    if monto ==0:
       print("Desactivar cuenta")
    self.activa = False

  def activar(self):
    self.activa = True

  def __str__(self):
    return f"Cuenta Comun {self.cantidad}"

class CuentaJoven(Cuenta):
    def __init__(self, bonificacion, monto_inicio=0, numero_de_cuenta=0):
       Cuenta.__init__(self,monto_inicio,numero_de_cuenta)
       self.bonificacion = bonificacion
 
    def __str__(self):
      return f"Cuenta Joven{self.cantidad}"

    def  caja_ahorro ( self , titular , cantidad , bonificacion ):
      saldo_extra = cantidad * self.bonificación
      print ( "el saldo con bonificacion es" , saldo_extra )

    def  aplicar_gastos( self , monto ): #extracción de dinero
       return super (). aplicar_gasto()

    def aplica_deposito(self):
      return super().aplicar_deposito()

    def aplicar_transferencia(self, monto):
      return super().aplicar_transferencia()

class Movimiento_Cuenta(object):
    def __init__(self,descripcion,monto_movimiento):
       self.descripcion = descripcion
       self.monto = monto_movimiento
       self.fecha_hora = datetime.datetime.now()

    def __str__(self):
      return f"{self.fecha_hora}{self.descripcion}{self.monto}"